[{"title":"Post-signup workflow","subtitle":"Handles all post-signup logic, including fan-out \u0026 emails","tags":["signup","marketing","sales","operations"],"description":"\n\n# Post-signup workflow example\n\nThis workflow runs after every `signup.new` event.  Each time a user signs up,\nthe workflow sends the user a welcome email, adds the user to Close.IO for\nsales followup, and adds the user to a marketing list - if the event data\nsays they've subscribed to a newsletter.\n\nYou can change out any of the example integrations easily, such as using\nSendgrid instead of Mandrill - or Salesforce instead of Close.io.  It's also a\ngood idea to add the user to places like Zendesk.\n\n## How this helps\n\n- Engineers don't have to write the initial integrations or spend time working\non non-product requests\n- Biz ops, sales, and marketing can be kept in the loop and make changes to\nthings like mailing lists etc.\n- Any time integrations change (which happens as a company ages), it's easy to\nversion and update the workflows with new integrations\n- It's easy to debug which users ran through which versions of a workflow\nvia the built in audit trails\n","workflow":"package main\n\nimport (\n\t\"inngest.com/workflows\"\n)\n\nworkflow: workflows.#Workflow \u0026 {\n\tname: \"Post-signup workflow\"\n\n\ttriggers: [{\n\t\tevent: \"signup.new\"\n\t}]\n\n\tactions: [\n\t\t{\n\t\t\tclientID: 1\n\t\t\tname:     \"Send the user a welcome email\"\n\t\t\tdsn:      \"mailchimp.inngest.com/send-transactional-email\"\n\t\t\tmetadata: {\n\t\t\t\tto:         \"{{ event.user.email }}\"\n\t\t\t\tsubject:    \"Welcome to my service!\"\n\t\t\t\tfrom_email: \"hi@example.com\"\n\t\t\t\thtml:       \"\u003ch1\u003eHello {{ event.user.name }}!\u003c/h1\u003e\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tclientID: 2\n\t\t\tname:     \"Add the user to our marketing list\"\n\t\t\tdsn:      \"mailchimp.inngest.com/add-to-list\"\n\t\t\tmetadata: {\n\t\t\t\tlistID: \"example-id\"\n\t\t\t\temail:  \"{{ event.user.email }}\"\n\t\t\t\tstatus: \"subscribed\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tclientID: 3\n\t\t\tname:     \"Add the user as a Close lead\"\n\t\t\tdsn:      \"closeio.inngest.com/add-lead\"\n\t\t\tmetadata: {\n\t\t\t\tlistID: \"example-id\"\n\t\t\t\tname:   \"{{ event.user.name }}\"\n\t\t\t}\n\t\t},\n\t]\n\n\tedges: [\n\t\t{\n\t\t\toutgoing: \"trigger\"\n\t\t\tincoming: 1\n\t\t\tmetadata: {\n\t\t\t\ttype: \"edge\"\n\t\t\t\tname: \"\"\n\t\t\t\tif:   \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\toutgoing: \"trigger\"\n\t\t\tincoming: 2\n\t\t\tmetadata: {\n\t\t\t\ttype: \"edge\"\n\t\t\t\tname: \"Newsletter is true\"\n\t\t\t\tif:   \"event.data.newsletter == true\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\toutgoing: \"trigger\"\n\t\t\tincoming: 3\n\t\t\tmetadata: type: \"edge\"\n\t\t},\n\t]\n}\n"},{"title":"Basic churn \u0026 re-engagement flow","subtitle":"Sends new signups an email if the user doesn't do something","tags":["signup","marketing"],"description":"\n\n# Basic churn \u0026 re-engagement flow\n\nThis workflow runs after every `signup.new` event.  It **waits up to 1 day\nfor another event**, and if the event **isn't** received it sends the user\nthat signed up an email.\n\nIn the context of a photo-sharing app, we might:\n\n- Wait for a new photo to be uploaded within 1 day\n- And, if the user hasn't uploaded photos, send them a push notification.\n\nThis example flow is used within Inngest to send reminders when users\ndon't create workflows after signing up :)\n\nYou can change out the email action easily for other messaging actions, for example\nif you wanted to send a push notification instead of an email.\n\n## How this helps\n\n- Once events are integrated, product \u0026 biz ops can begin creating these campaigns\nwithout engineering input\n- No infrastructure is requierd to coordinate between events, manage cron jobs,\nor delayed queues.  It's all built in, ready to go\n","workflow":"package main\n\nimport (\n\t\"inngest.com/workflows\"\n)\n\nworkflow: workflows.#Workflow \u0026 {\n\tname: \"Churn\"\n\ttriggers: [{\n\t\tevent: \"signup.new\"\n\t}]\n\tactions: [{\n\t\tclientID: 1\n\t\tname:     \"Wait for a workflow to be created\"\n\t\tdsn:      \"com.inngest/wait-for-event\"\n\t\tmetadata: {\n\t\t\t// We're waiting up to 1 day for a workflow created event from the\n\t\t\t// very same user.\n\t\t\tevent: \"workflow.created\"\n\t\t\tmatch: \"async.user.external_id == '{{ event.user.external_id }}'\"\n\t\t\tttl:   \"1d\"\n\t\t}\n\t}, {\n\t\tclientID: 2\n\t\tname:     \"Send a re-engagement email\"\n\t\tdsn:      \"mailchimp.inngest.com/send-transactional-email\"\n\t\tmetadata: {\n\t\t\tfrom_email: \"hello@inngest.com\"\n\t\t\tfrom_name:  \"Inngest\"\n\t\t\tsubject:    \"Make your first serverless flow in seconds! ➡️\"\n\t\t\tto:         \"{{ event.user.email }}\"\n\t\t}\n\t}]\n\tedges: [{\n\t\toutgoing: \"trigger\"\n\t\tincoming: 1\n\t\tmetadata: {\n\t\t\ttype: \"edge\"\n\t\t\tname: \"\"\n\t\t\tif:   \"\"\n\t\t}\n\t}, {\n\t\toutgoing: 1\n\t\tincoming: 2\n\t\t// If the \"wait for event\" action times out, we're going to traverse\n\t\t// this edge.  This means that the event _was not_ received within 1 day.\n\t\tmetadata: {\n\t\t\ttype: \"edge\"\n\t\t\tname: \"When the event isn't received\"\n\t\t\tif:   \"response.timeout == true\"\n\t\t}\n\t}]\n}\n"}]